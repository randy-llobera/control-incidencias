name: Promote DB changes to Staging

on:
  workflow_run:
    workflows: ["DB CI Gate"]
    types: [completed]
  # Runnig for workflow only
  # push:
  #   branches: [working]
  #   paths:
  #     - "supabase/**"
  #     - "scripts/**"
  #     - ".github/workflows/staging-sync.yml"
  workflow_dispatch: {}

jobs:
  # Runs only after "DB CI Gate" succeeds on branch 'working'
  promote-staging:
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'working') || (github.event_name == 'push' && github.ref == 'refs/heads/working') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.STAGING_SUPABASE_ACCESS_TOKEN }}
      SUPABASE_STAGING_REF: ${{ secrets.SUPABASE_STAGING_REF }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to staging
        run: |
          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            echo "ERROR: SUPABASE_ACCESS_TOKEN is empty/unset (check repo secret STAGING_SUPABASE_ACCESS_TOKEN)"; exit 1;
          fi
          if [ -z "$SUPABASE_STAGING_REF" ]; then
            echo "ERROR: Missing SUPABASE_STAGING_REF in repo secrets"; exit 1;
          fi
          supabase link --project-ref "$SUPABASE_STAGING_REF"

      - name: Apply migrations to staging
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.STAGING_SUPABASE_ACCESS_TOKEN }}
        run: supabase db push

      - name: Write staging .env.local for scripts
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.STAGING_SUPABASE_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          {
            echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_API_URL }}"
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.STAGING_SERVICE_ROLE_KEY }}"
            echo "LOCAL_DB_URL=${{ secrets.STAGING_DB_URL }}"
            echo "LOCAL_ADMIN_EMAIL=${{ secrets.LOCAL_ADMIN_EMAIL || 'admin.staging@example.com' }}"
            echo "LOCAL_ADMIN_PASSWORD=${{ secrets.LOCAL_ADMIN_PASSWORD || 'Passw0rd!-staging' }}"
          } > .env.local
          echo "Wrote .env.local (masked):"
          sed 's/SUPABASE_SERVICE_ROLE_KEY=.*/SUPABASE_SERVICE_ROLE_KEY=****/; s/LOCAL_ADMIN_PASSWORD=.*/LOCAL_ADMIN_PASSWORD=****/' .env.local

      # 1) First pass: ensure base data (roles, etc.)
      - name: Seed (base) – idempotent
        run: npm run db:seed:local

      # 2) Ensure local admin (trigger now succeeds because roles exist)
      - name: Ensure local admin (Auth + mirror)
        run: npm run db:ensure-admin

      # 3) Second pass: data that depends on created_by/admin now links correctly
      - name: Seed (dependent) – idempotent rerun
        run: npm run db:seed:local
